name: Publish to PyPI

on:
  push:
    branches: [main]
    paths:
      - "_version.py"

jobs:
  check-version:
    runs-on: macos-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if version changed
        id: check
        run: |
          # Get current version
          CURRENT_VERSION=$(grep "__version__" _version.py | sed "s/__version__ = '\([^']*\)'/\1/")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Check if _version.py was modified in the last commit
          if git diff HEAD^ HEAD --name-only | grep -q "_version.py"; then
            # Try to get previous version (may not exist if file is new)
            if git cat-file -e HEAD^:_version.py 2>/dev/null; then
              PREV_VERSION=$(git show HEAD^:_version.py | grep "__version__" | sed "s/__version__ = '\([^']*\)'/\1/")
            else
              # File is new, treat as version change
              PREV_VERSION="none"
            fi

            if [ "$CURRENT_VERSION" != "$PREV_VERSION" ]; then
              echo "Version changed from $PREV_VERSION to $CURRENT_VERSION"
              echo "should_release=true" >> $GITHUB_OUTPUT
            else
              echo "Version file changed but version number unchanged"
              echo "should_release=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Version file not changed in last commit"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  release:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: macos-latest
    environment: release
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install system dependencies
        run: |
          brew install hdf5
          echo "HDF5_DIR=$(brew --prefix hdf5)" >> $GITHUB_ENV

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine numpy h5py pybind11

      - name: Build package
        run: python -m build

      - name: Check distribution
        run: twine check dist/*

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          release_name: Release v${{ needs.check-version.outputs.version }}
          body: |
            Release version ${{ needs.check-version.outputs.version }}

            Install with: `pip install --upgrade ysa-signal`
          draft: false
          prerelease: false
