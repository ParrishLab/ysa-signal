name: Run Tests

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        python-version: ["3.10"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Display macOS version
        if: runner.os == 'macOS'
        run: sw_vers

      - name: Display Windows version
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Get-ComputerInfo | Select-Object WindowsProductName, WindowsVersion, OsHardwareAbstractionLayer

      - name: Display Linux version
        if: runner.os == 'Linux'
        run: |
          cat /etc/os-release
          uname -a

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install hdf5
          echo "HDF5_DIR=$(brew --prefix hdf5)" >> $GITHUB_ENV

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libhdf5-dev

      - name: Setup Visual Studio (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Download and setup HDF5 (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/HDFGroup/hdf5/releases/download/hdf5_1.14.5/hdf5-1.14.5-win-vs2022_cl.zip" -OutFile "hdf5.zip"
          7z x hdf5.zip
          $hdf5Dir = Get-ChildItem -Directory | Where-Object { $_.Name -like "hdf5*" } | Select-Object -First 1
          Write-Host "Found HDF5 directory: $($hdf5Dir.Name)"
          New-Item -ItemType Directory -Force -Path "${{ github.workspace }}/HDF5-1.14.5-win64"
          Move-Item -Path "$($hdf5Dir.FullName)/*" -Destination "${{ github.workspace }}/HDF5-1.14.5-win64/"
          Push-Location "${{ github.workspace }}/HDF5-1.14.5-win64"
          7z x HDF5-1.14.5-win64.zip
          Remove-Item -Path * -Exclude "HDF5-1.14.5-win64" -Force
          Move-Item -Path "HDF5-1.14.5-win64/*" -Destination "./"
          Remove-Item -Path "HDF5-1.14.5-win64" -Recurse -Force
          Pop-Location
          echo "${{ github.workspace }}/HDF5-1.14.5-win64/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "GITHUB_WORKSPACE=${{ github.workspace }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install numpy h5py pybind11 pytest pytest-cov

      - name: Build C++ extensions (macOS/Linux)
        if: runner.os != 'Windows'
        run: |
          cd extensions
          python setup.py build_ext --inplace
          cd ..

      - name: Build C++ extensions (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd extensions
          python win_setup.py build_ext --inplace
          cd ..

      - name: Run setup wizard non-interactively
        run: |
          python setup_wizard.py || echo "Setup wizard failed, but continuing to test basic functionality"
        continue-on-error: true

      - name: Run unit tests
        run: |
          python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}
          fail_ci_if_error: false

  # Require tests to pass before allowing merge
  test-status:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "Tests failed!"
            exit 1
          fi
          echo "All tests passed!"
