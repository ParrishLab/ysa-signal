name: Post-Release Integration Test

on:
  workflow_run:
    workflows: ["Build and Release Wheels"]
    types:
      - completed
    branches: [main]

jobs:
  wait-for-pypi:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Wait for PyPI propagation
        run: |
          echo "Waiting 3 minutes for PyPI to propagate the new release..."
          sleep 180

  integration-test:
    needs: wait-for-pypi
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]

    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install ysa-signal from PyPI
        run: |
          python -m pip install --upgrade pip
          pip install ysa-signal --no-cache-dir

      - name: Verify installation
        run: |
          python -c "import ysa_signal; print(f'ysa-signal version: {ysa_signal.__version__}')"
          python -c "import sz_se_detect; print('sz_se_detect imported successfully')"
          python -c "import signal_analyzer; print('signal_analyzer imported successfully')"

      - name: Download test .brw file
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Download the test file from the latest release tagged as 'test-data'
          gh release download test-data \
            --repo ${{ github.repository }} \
            --pattern "test_recording.brw" \
            --dir ./test_data || echo "Test data release not found, will skip file test"

      - name: Run integration test (macOS)
        if: runner.os == 'macOS' && hashFiles('test_data/test_recording.brw') != ''
        run: |
          python -c "
          import ysa_signal
          import os

          test_file = 'test_data/test_recording.brw'
          if os.path.exists(test_file):
              print(f'Running analysis on {test_file}...')
              # Run your actual analysis function here
              # Example: results = ysa_signal.analyze(test_file)
              print('Analysis completed successfully!')
          else:
              print('Test file not found, skipping')
          "

      - name: Run integration test (Windows)
        if: runner.os == 'Windows' && hashFiles('test_data/test_recording.brw') != ''
        shell: pwsh
        run: |
          python -c @"
          import ysa_signal
          import os

          test_file = 'test_data/test_recording.brw'
          if os.path.exists(test_file):
              print(f'Running analysis on {test_file}...')
              # Run your actual analysis function here
              # Example: results = ysa_signal.analyze(test_file)
              print('Analysis completed successfully!')
          else:
              print('Test file not found, skipping')
          "@

      - name: Report success
        if: success()
        run: |
          echo "✅ Integration test passed on ${{ matrix.os }}"

      - name: Report failure
        if: failure()
        run: |
          echo "❌ Integration test failed on ${{ matrix.os }}"
          exit 1

  update-status:
    needs: integration-test
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create status badge
        run: |
          if [ "${{ needs.integration-test.result }}" == "success" ]; then
            echo "Integration tests passed"
          else
            echo "Integration tests failed"
            exit 1
          fi
